<?php
namespace Core;
/**
 * Utility class to generate random values. Based on the mt_rand() native method
 * @todo Add A Format method or generate from format
 * @todo Create a set of methods to generate arrays of random elements
 */
final class Random extends Object{
	###########################################################################
	# Private Static Fields
	###########################################################################
	/**
	 * This will be initialized to the maximum int random number that can be generated by mt_rand(). [This is simply to store the 
	 * return value of mt_getrandmax() for further use in the code]
	 * @var integer
	 */
	private static $_maxIntRand;
	/**
	 * A shuffled array of lowercase characters
	 * @var array
	 */
	private static $_lower; //26
	/**
	 * A shuffled array of uppercase characters
	 * @var array
	 */
	private static $_upper; //26
	/**
	 * A shuffled array of numeric digits
	 * @var array
	 */
	private static $_digits; //10
	/**
	 * A shuffled array of number signs characters
	 * @var array
	 */
	private static $_signs; //2
	/**
	 * A shuffled array of witespace characters
	 * @var array
	 */
	private static $_whitespace; //5
	/**
	 * A shuffled array of special characters
	 * @var array
	 */
	private static $_special; //32
	/**
	 * A shuffled array of enclosing characters - Openning Paranthesis
	 * @var array
	 */
	private static $_enclosingOpen; //6
	/**
	 * A shuffled array of enclosing characters - Closing Paranthesis
	 * @var array
	 */
	private static $_enclosingClose; //6
	/**
	 * A shuffled array of alphabitical characters
	 * @var array
	 */
	private static $_alpha; //52
	/**
	 * A shuffled array of alphanumeric characters
	 * @var array
	 */
	private static $_alphaNumeric; //62
	/**
	 * A shuffled array of alphabitical and whitespace characters
	 * @var array
	 */
	private static $_alphaWhite; //57
	/**
	 * A shuffled array of alphanumeric and whitespace characters
	 * @var array
	 */
	private static $_alphaNumericWhite; //67
	/**
	 * A shuffled array of all printable characters
	 * @var array
	 */
	private static $_printable; //99
	###########################################################################
	# Constructor
	###########################################################################
	/**
	 * Static constructor.
	 */
	public static function Initialize(){
		self::$_lower = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
		self::$_upper = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
		self::$_digits = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
	 	self::$_signs = array('+', '-');
	 	self::$_whitespace = array(' ', "\t", "\n", "\r", "\f");
	 	self::$_special = array(
	 			'`', '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+',
	 			']', '}', '[', '{', '"', "\'", ';', ':', '/', '?', '.', '>', ',', '<', '\\', '|'
	 	);
	 	self::$_enclosingOpen = array('(', '[', '{', '<', "\'", '"');
	 	self::$_enclosingClose = array(')', ']', '}', '>', "\'", '"');
	 	
	 	self::$_alpha = array(
	 			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	 			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
	 	);
	 	self::$_alphaNumeric = array(
	 			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	 			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	 			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
	 	);
	 	self::$_alphaWhite = array(
	 			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	 			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	 			' ', "\t", "\n", "\r", "\f"
	 	);
	 	self::$_alphaNumericWhite = array(
	 			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	 			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	 			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', "\t", "\n", "\r", "\f"
	 	);
	 	self::$_printable = array(
	 			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	 			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	 			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', "\t", "\n", "\r", "\f",
	 			'`', '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+',
	 			']', '}', '[', '{', '"', "\'", ';', ':', '/', '?', '.', '>', ',', '<', '\\', '|'
	 	);
	 	shuffle(self::$_alpha);
	 	shuffle(self::$_alphaNumeric);
	 	shuffle(self::$_alphaNumericWhite);
	 	shuffle(self::$_alphaWhite);
	 	shuffle(self::$_digits);
	 	shuffle(self::$_lower);
	 	shuffle(self::$_printable);
	 	shuffle(self::$_signs);
	 	shuffle(self::$_special);
	 	shuffle(self::$_upper);
	 	shuffle(self::$_whitespace);
	 	self::$_maxIntRand = mt_getrandmax();
	}
	###########################################################################
	# Random String Generation
	###########################################################################
	/**
	 * Returns a random printable string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_printable[mt_rand(0, 98)];
		}
		return $res;
	}
	/**
	 * Returns a random printable string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextPrintableString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_printable[mt_rand(0, 98)];
		}
		return $res;
	}
	/**
	 * Returns a random alphanumeric or whitespace string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextAlphaNumericOrWhitespaceString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_alphaNumericWhite[mt_rand(0, 66)];
		}
		return $res;
	}
	/**
	 * Returns a random alphabitical or whitespace string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextAlphaOrWhitespaceString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_alphaWhite[mt_rand(0, 56)];
		}
		return $res;
	}
	/**
	 * Returns a random alphanumeric string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextAlphaNumericString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_alphaNumeric[mt_rand(0, 61)];
		}
		return $res;
	}
	/**
	 * Returns a random alphabitical string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextAlphaString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_alpha[mt_rand(0, 51)];
		}
		return $res;
	}
	/**
	 * Returns a random special string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextSpecialString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_special[mt_rand(0, 31)];
		}
		return $res;
	}
	/**
	 * Returns a random whitespace string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextWhitespaceString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_whitespace[mt_rand(0, 4)];
		}
		return $res;
	}
	/**
	 * Returns a random number sign string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextSignString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_signs[mt_rand(0,1)];
		}
		return $res;
	}
	/**
	 * Returns a random digit string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextDigitString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_digits[mt_rand(0, 9)];
		}
		return $res;
	}
	/**
	 * Returns a random uppercase string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextUpperString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_upper[mt_rand(0, 25)];
		}
		return $res;
	}
	/**
	 * Returns a random lowercase string of the specified length
	 * @param integer $length The length of the generated string
	 * @throws InvalidParameterTypeException If the length is not an integer
	 * @throws InvalidParameterValueException If the length is not greater than 0
	 * @return string
	 */
	public static function NextLowerString($length = 1){
		Params::InsureInt($length, "length"); Params::InsureGT($length, 0, "length");
		$res = "";
		for($i=0; $i<$length; $i++){
			$res .= self::$_lower[mt_rand(0, 25)];
		}
		return $res;
	}
	###########################################################################
	# Random Character Generation
	###########################################################################
	/**
	 * Returns a random printable character
	 * @return string
	 */
	public static function NextChar(){
		return self::$_printable[mt_rand(0, 98)];
	}
	/**
	 * Returns a random printable character
	 * @return string
	 */
	public static function NextPrintableChar(){
		return self::$_printable[mt_rand(0, 89)];
	}
	/**
	 * Returns a random alphanumeric or whitespace character
	 * @return string
	 */
	public static function NextAlphaNumericOrWhitespaceChar(){
		return self::$_alphaNumericWhite[mt_rand(0, 66)];
	}
	/**
	 * Returns a random alphabitical or whitespace character
	 * @return string
	 */
	public static function NextAlphaOrWhitespaceChar(){
		return self::$_alphaWhite[mt_rand(0, 56)];
	}
	/**
	 * Returns a random alphanumeric character
	 * @return string
	 */
	public static function NextAlphaNumericChar(){
		return self::$_alphaNumeric[mt_rand(0, 61)];
	}
	/**
	 * Returns a random alphabitical character
	 * @return string
	 */
	public static function NextAlphaChar(){
		return self::$_alpha[mt_rand(0, 51)];
	}
	/**
	 * Returns a random enclosing character (parnthesis) character
	 * @return string
	 */
	public static function NextEnclosingOpenerChar(){
		return self::$_enclosingOpen[mt_rand(0, 5)];
	}
	/**
	 * Returns a random special character
	 * @return string
	 */
	public static function NextSpecialChar(){
		return self::$_special[mt_rand(0, 31)];
	}
	/**
	 * Returns a random whitespace character
	 * @return string
	 */
	public static function NextWhitespaceChar(){
		return self::$_whitespace[mt_rand(0, 4)];
	}
	/**
	 * Returns a random number sign character
	 * @return string
	 */
	public static function NextSignChar(){
		return self::$_signs[mt_rand(0,1)];
	}
	/**
	 * Returns a random digit character
	 * @return string
	 */
	public static function NextDigitChar(){
		return self::$_digits[mt_rand(0, 9)];
	}
	/**
	 * Returns a random uppercase character
	 * @return string
	 */
	public static function NextUpperChar(){
		return self::$_upper[mt_rand(0, 25)];
	}
	/**
	 * Returns a random lowercase character
	 * @return string
	 */
	public static function NextLowerChar(){
		return self::$_lower[mt_rand(0, 25)];
	}
	###########################################################################
	# Random Number Generation
	###########################################################################
	/**
	 * Returns a random integer number netween the supplied values including the supplied values themselves.
	 * The order at which min and max are supplied is not important, they will be sorted out
	 * @param integer $min Optional minimum value to be returned [Defaults to 0]
	 * @param integer $max Optional maximum value to be returned [Defaults to mt_getrandmax()]
	 * @throws InvalidParameterTypeException If the value of min or max is not an integer
	 * @return integer
	 */
	public static function NextInt($min = null, $max = null){
		$mn = $min === null ? 0 : $min;
		$mx = $max === null ? self::$_maxIntRand : $max;
		Params::InsureInt($mn, "min"); Params::InsureInt($mx, "max");
		if($mn > $mx){
			$t = $mn; $mn = $mx; $mx = $t;
		}
		return mt_rand($mn, $mx);
	}
	/**
	 * Returns a new random floating point number between 0 and 1 exclusive.
	 * @return float
	 */
	public static function NextFraction(){
		return  (float)(1 / (float)mt_rand(2));
	}
	/**
	 * Returns a new random floating point number between 0 and 1 inclusive.
	 * @return float
	 */
	public static function NextFractionInclusive(){
		$rnd = mt_rand();
		if($rnd === 0){
			return 0.0;
		}
		elseif($rnd === self::$_maxIntRand()){
			return 1.0;
		}
		else{
			return (float)(1 / (float)$rnd);
		}
	}
	/**
	 * Returns a floating point random number between min and max inclusive. The order at which min and max are provided does not matter, they'll be sorted out.
	 * @param number $min The minimum value to be generated
	 * @param number $max The maximum value to be generated
	 * @throws InvalidParameterTypeException If the value of min or max is not a number
	 * @return float
	 */
	public static function NextFloat($min = null, $max = null){
		$mn = $min === null ? 0.0 : $min;
		$mx = $max === null ? (float)self::$_maxIntRand : $max;
		Params::InsureNumeric($mn, "min"); Params::InsureNumeric($mx, "max");
		if($mn > $mx){
			$t = $mn; $mn = $mx; $mx = $t;
		}
		return $mn + (self::NextFractionInclusive() * ($mx - $mn));
	}
	###########################################################################
	# Random Interaction
	###########################################################################
	/**
	 * Shuffles an array, a string or a Traversable object. If a Traversable is supplied, the return will be an array of the keys and values of the traversable object
	 * @param array|string|\Traversable $elements the elements that needs to be shuffled
	 * @throws InvalidParameterTypeException If the supplied parameter is not of a valid type (array, string or a Traversable object)
	 * @return array|string
	 */
	public static function Shuffle($elements){
		if(is_array($elements) || $elements instanceof \Traversable ){
			$res = array();
			foreach ($elements as $key => $value){
				$res[$key] = $value;
			}
			shuffle($res);
			return $res;
		}
		elseif(is_string($elements)){
			return str_shuffle($elements);
		}
		else{
			throw new InvalidParameterTypeException("elements", __METHOD__, "array, string or a Traversable object");
		}
	}
	/**
	 * Picks an item randomly from a string, an array or an ArrayAccess object
	 * @param array|string|\ArrayAccess $elements The elements to pick randomly from
	 * @throws InvalidParameterTypeException If the elements provided was not of a valid type (array, string or ArrayAccess object)
	 * @return mixed
	 */
	public static function Pick($elements){
		if(is_array($elements) || $elements instanceof \ArrayAccess){
			return $elements[self::NextInt(0, count($elements) - 1)];
		}
		elseif(is_string($elements)){
			return $elements[self::NextInt(0, strlen($elements))];
		}
		else {
			throw new InvalidParameterTypeException("elements", __METHOD__, "array, string or ArrayAccess object");
		}
	}
}
Random::Initialize();